{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Home","pathname","useLocation","About","name","useParams","to","Contact","history","onClick","push","FakeText","App","style","textDecoration","path","exact","component","render","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8OAkCA,IAAMA,EAAO,WAAO,IACVC,EAAaC,cAAbD,SACR,OACA,kBAAC,WAAD,KACE,oCACA,2CAAkBA,GAClB,kBAAC,EAAD,QAkBEE,EAAQ,WAAO,IACVC,EAASC,cAATD,KACR,OACC,kBAAC,WAAD,KACa,gBAATA,EAAyB,kBAAC,IAAD,CAAUE,GAAG,MAAS,KACjD,qCAAWF,GACX,kBAAC,EAAD,QAgBAG,EAAU,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAEhB,OACE,kBAAC,WAAD,KACE,uCACA,4BAAQC,QAAS,kBAAMD,EAAQE,KAAK,OAApC,gBACA,kBAAC,EAAD,QAMAC,EAAW,kBAEb,6BACE,oGACA,sPAGA,gDACA,6aAUSC,EA1Gf,WAGE,OACE,kBAAC,IAAD,KACE,8BACE,6BACE,4BACE,4BAAI,kBAAC,IAAD,CAAMN,GAAG,IAAIO,MAAO,CAAEC,eAAgB,SAAtC,SACJ,4BAAI,kBAAC,IAAD,CAAMR,GAAE,iBART,eAQ6BO,MAAO,CAAEC,eAAgB,SAArD,UACJ,4BAAI,kBAAC,IAAD,CAAMR,GAAG,WAAWO,MAAO,CAAEC,eAAgB,SAA7C,cAGR,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWjB,IAG/B,oCACA,kBAAC,IAAD,CAAOe,KAAK,eAAgBE,UAAWd,IACvC,kBAAC,IAAD,CAAOY,KAAK,WAAYE,UAAWV,KAGrC,kBAAC,IAAD,CAAOW,OAAQ,kBAAK,0DCdVC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASN,OAAO,kBAAC,EAAD,MAASO,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.2a78256f.chunk.js","sourcesContent":["import React, { Fragment } from 'react';\nimport './index.css';\nimport { BrowserRouter as Router, Route, Link, Switch, Redirect, useParams, useHistory, useLocation } from 'react-router-dom';\n\nfunction App() {\n  const name = 'David Akpan';\n  const isAuthenticated = true;\n  return (\n    <Router>\n      <main>\n        <nav>\n          <ul>\n            <li><Link to=\"/\" style={{ textDecoration: 'none' }}>Home</Link></li>\n            <li><Link to={`/about/${name}`} style={{ textDecoration: 'none' }}>About</Link></li>\n            <li><Link to=\"/contact\" style={{ textDecoration: 'none' }}>Contact</Link></li>\n          </ul>\n        </nav>\n        <Switch>\n          <Route path=\"/\" exact component={Home} />\n          {\n            isAuthenticated ? \n            <>\n            <Route path=\"/about/:name\"  component={About} />\n            <Route path=\"/contact\"  component={Contact} />\n            </> : <Redirect to=\"/\" />\n          }\n          <Route render={()=> <h1>404: Page not found</h1>} />\n        </Switch>\n        \n      </main>\n    </Router> \n  );\n}\n//Home Page\nconst Home = () => {\n  const { pathname } = useLocation()\n  return (\n  <Fragment>\n    <h1>Home</h1>\n    <p>Current URL: { pathname }</p>\n    <FakeText />\n\n  </Fragment>\n  )\n}\n  \n\n\n//About Page\n// props.match.params.name\n// const About = ({match:{params:{name}}}) => (\n//   <Fragment>\n//     { name !== 'David Akpan' ? <Redirect to=\"/\" /> : null}\n//     <h1>About {name}</h1>\n//     <FakeText />\n//   </Fragment>\n// )\n\nconst About = () => {\n   const { name } = useParams()\n   return (\n    <Fragment>\n      { name !== 'David Akpan' ? <Redirect to=\"/\" /> : null}\n      <h1>About {name}</h1>\n      <FakeText />\n    </Fragment>\n   )\n  \n   }\n\n//Contact Page\n// const Contact = ({ history }) => (\n//   <Fragment>\n//     <h1>Contact</h1>\n//     <button onClick={ () => history.push('/') }>Take me home</button>\n//     <FakeText />\n//   </Fragment>\n// )\n\n\nconst Contact = ({history}) => {\n  // const { history } = useHistory();\n  return (\n    <Fragment>\n      <h1>Contact</h1>\n      <button onClick={() => history.push('/') } >Back To home</button>\n      <FakeText />\n    </Fragment>\n  )\n};\n  \n\nconst FakeText = () => (\n \n    <div>\n      <h1>A Complete Beginner's Guide to React Router (Including Router Hooks)</h1>\n      <p>\n       React is a JavaScript library for building user interfaces. We can also extend it to build multi-page applications with the help of React Router. This is a third-party library that enables routing in our React apps.\n      </p>\n      <h1>What is routing?</h1>\n      <p>\n        Routing is the capacity to show different pages to the user. That means the user can move between different parts of an application by entering a URL or clicking on an element.\n\n        As you may already know, by default, React comes without routing. And to enable it in our project, we need to add a library named react-router.\n\n        To install it, you will have to run the following command in your terminal:\n      </p>\n    </div>\n)\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}